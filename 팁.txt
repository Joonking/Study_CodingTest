
*** 자주 까먹는거 or 새로운 팁들 정리 ***

입출력 ------------------------------------------------------------------------------------------------------------------------------------

cin, cout 빠르게

	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

cout 소수점 출력하기
	cout << fixed;
	cout.precision(3);    -> 0.342    소수점 3자리까지 출력
	cout.unsetf(ios::fixed)				-> 소수점 고정 해제







배열 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

배열 특정 값으로 채우기 fill

	전체 초기화 : 처음에는 [0][0]을 써주고, 그 다음 칸에는 [최대 행(값) - 1][최대 열], 다음 칸에는 초기 상태의 값
	ex>	fill(&map[0][0], &map[MAX - 1][MAX], 0);  
	ex> 	fill(&visited[0][0], &visited[MAX - 1][MAX], false);






vector ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

answer.resize(N, vector<int>(N));	//NxN 크기로 resize 하는 방법


vector 원소 찾기 (인덱스 찾기)   - algorithm 인클루드 필요
	find(v.begin(), v.end(), 찾을 대상)
		리턴값이 v.end() 인경우 -> 해당 원소가 존재하지 않는것
		리턴값이 v.end()가 아닌 경우 -> 해당 원소가 존재하는 것

	find(v.begin(), v.end(), 찾을대상) - v.end()
		vector 내에서 해당 원소가 위치하는 인덱스 찾기



vector 중복되는 항목 제거하기

	우선 sort 하고
		sort(answer.begin(),answer.end());
	unique 하면 중복되는 항목은 벡터의 뒤에 추가됨. 이것 까지 없애려면 erase 함수를 쓰면됨.
		answer.erase(unique(answer.begin(),answer.end()),answer.end());

	erase 함수는 특정 인덱스를 지우는 함수임.
		v.erase(v.begin() + i);   이렇게 하면 v의 i번째 인덱스의 원소를 삭제함.

		v[5]를 지우고 싶다면 v.erase(v.begin() + 5);


vector 초기화
	fill(visited.begin(), visited.end(), false); 

	sort 
		sort(arr.begin(), arr.end());		<- 기본 오름차순
		sort(arr.begin(), arr.end(), greater<자료형>());		<- 내림차순
		sort(arr.begin(), arr.end(), compare)		<- 사용자 정의 함수

		bool compare(int a, int b)			<- 사용자 정의 함수
		{
			return a > b;
		}







Queue ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

큐 만들고, pair 만들어 넣기

	queue<pair<int, int>> Queue;
	Queue.push(make_pair(x, y));
	pair<int, int> now = Queue.front();
	Queue.pop();
	int nowX = now.first;
	int nowY = now.second;







우선순위 큐 (헤더 : queue) --------------------------------------------------------------------------------------------------------------------------------------------------------
	priority_queue.empty()
	우선 순위 큐가 비었는지 확인하는 함수

	priority_queue.size()
	우선 순위 큐의 크기가 반환

	priority_queue.top()
	우선 순위 큐의 루트 노드(맨 위의)값을 반환

	priority_queue.push()
	우선 순위 큐에 인자를 삽입

	priority_queue.pop()
	우선 순위 큐의 루트 노드(맨 위의)값을 삭제

	선언
			최대힙
			priority_queue<int> p_queue; 

			최소힙
			priority_queue<int, vector<int>, greater<int>> p_queue;
			
			비교연산자 활용
			struct cmp {
				bool operator()(int a, int b) {
					return a > b;
				}
			};
			priority_queue <int, vector<int>, cmp> pq;
			
			구조체 활용
			//사용할 구조체
			struct s{
				int i;
				char c;
  
				//생성자
				s(int num, char alpha) : i(num), c(alpha) {}
			};

			// 비교를 위한 기준
			struct cmp {
				bool operator()(s a, s b) {
					 // int형의 값이 같을 경우
					if(a.i == b.i) {
						// char형의 값이 큰 것이 우선하도록한다.
						return a.c < b.c;
					}
					// int형의 값이 작은 것이 우선하도록한다.
					return a.i > b.i;
				}
			};

			//우선순위큐를 선언할때 <자료형, 구현체, 비교연산자> 로 선언한다.
			priority_queue <s, vector<s>, cmp> pq;

			//생성자를 이용한 구조체 입력
			pq.push(s(3, 'a'));
			pq.push(s(4, 'b'));
			pq.push(s(5, 'y'));
			pq.push(s(3, 'z'));
			pq.push(s(100, 'z'));

			출력결과
				3 z
				3 a 
				4 b
				5 y
				100 z







해시 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Hash Table
	- 해쉬는 전화번호부와 같음.
	- 키값과 value 값으로 이루어져있음.

	c++ 에서 제공하는 map은 데이터를 정렬하여 저장한다.
	따라서 정렬이 필요 없을 경우에는 unordered_map 을 사용하는 것이 훨씬 성능이 좋다.
	데이터가 N개일때 탐색속도는
	map 의 경우 O(logN)
	unordered_map 의 경우 O(1) 가 된다.

	ex>
		map<key, value> name;
		unordered_map<key, value> name;
		//key, value에 int,string,bool등 자료형 넣음

		map에 원소 추가
		//name.insert(make_pair(key,value));
		//name[key] = 2;
		map<string, int> m;
		m.insert(make_pair("one",1));
		m["one"] = 1;

		map 원소에 접근
		name[key]
		name.at(key)

		map 키값으로 찾기
		name.find("one")
		키 값이 "one"인 원소의 iterator 리턴
		찾는 값이 없다면 name.end() 리턴


	




탐색 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


	이분탐색(이진탐색) - 술게임 업다운 게임
		이진탐색은 데이터가 정렬된 상태에서 원하는 값을 찾아내는 알고리즘임.
		찾고자 하는 값과 중앙값을 비교해서 탐색하는 범위를 절반씩 줄이면서 찾는 방식임.
		left				mid				right

		찾으려는 값 : 18
		left : 1					mid : 25						right : 50			-> 18 < 25 => right = mid -1

		left : 1					mid : 12						right : 24			-> 18 > 12 => left = mid +1

		left : 13					mid :	18						right :	24			-> 18 찾았당.

		만약 찾는 값이 없으면 break는 left > right 일때로 해주면 됨.
		while(left <= right) 로 설정하고 이진탐색






수학 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

유클리드 호제법 정의 (문제 2609_최대공약수와최소공배수)
	2개의 자연수  a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단 a > b), 
	a와 b의 최대공약수는 b와 r의 최대공약수와 같다.
	이 성질에 따라, b를 r로 나눈 나머지 r0를 구하고, 
	다시 r을 r0로 나눈 나머지를 구하는 과정을 반복하여 나머지가 0이 되었을 때 
	나누는 수가 a와 b의 최대공약수이다.

	int gcd(int a, int b)			<- 최대 공약수 구하는 함수
	{
		if(a%b==0)return b;
		return gcd(b, a%b);
	}

	소수찾기 함수 (O(루트n))
		bool isPrime(int n) {
			if (n < 2) return false;
			for (int i = 2; i * i <= n; i++) {
				if (n % i == 0) return false;
			}
			return true;
		}




문자열 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


공백 포함 문자열 입력받기
	1. getline 이용
	int main() {
		string s;
		getline(cin, s);
		cout << s;
	}
	getline을 쓰면 알아서 공백 포함하여 문자열을 입력받는다.

	2. cin.getline 이용
	int main() {	
		char s[100];
		cin.getline(s, 100, '\n');
		cout << s;
	}
	cin.getline(char배열 이름, 배열크기, 구분문자);
	다른점은 엔터말고 특정문자로 입력을 종료시킬 수 있다는 점

	3. gets_s 이용
	int main() {
		char s[100];
		gets_s(s, sizeof(s));
		cout << s;
	}
	2번이랑 비슷하다.
	gets_s(char배열 이름, 배열크기)


문자열 대소문자 관련
	소문자 판별 islower(str[i])		-> 소문자가 아니라면 0반환
	대문자 판별 isupper(str[i])		-> 대문자가 아니라면 0반환
	소문자 변환 str[i] = tolower(str[i])
	대문자 변환 str[i] = toupper(str[i])


int, long, long long -> string
	long long sum;
	string an = to_string(sum);

string -> int, unint, long, float, double, long double
	stoi			int
	stoul			unsigned long
	stoull			unsigned long long
	stof			float
	stod			double
	stold			long double
	stoll			string을 long long으로 변환 stoll(str);
	stol			string을 long으로 변환 stol(str);


string 유용한 멤버 함수
	str.find("abcd")				"abcd"가 str에 포함되어있는지를 확인. 찾으면 해당 부분의 첫번째 index를 반환
									찾는 문자가 없으면 string::npos 를 반환
	str.find("abcd", n)			n번째 index부터 "abcd"를 find
	str.substr()					str 전체를 반환
	str.substr(n)					str의 n번째 index부터 끝까지의 문자를 부분문자열로 반환
	str.substr(n, k)				str의 n번째 index부터 k개의 문자를 부분문자열로 반환
	str.compare(str2)			str과 str2가 같은지를 비교. 같다면 0, str<str2 인 경우 음수, str>str2 인 경우 양수를 반환
	swap(str1, str2)				str1과 str2를 바꿔줌. reference를 교환하는 방식
	isdigit(c)						c 문자가 숫자이면 true, 아니면 false를 반환 
	isalpha(c)					c 문자가 영어이면 true, 아니면 false를 반환
	toupper(c)					c 문자를 대문자로 변환
	tolower(c)					c 문자를 소문자로 변환


int isdigit(int c)		숫자 판단 함수
	매개변수로 들어가는 c는 char 타입이 아닌 int 타입임.
	이거는 char 타입이 아스키코드 번호로 들어갈 수 있기때문임.
	ex > string str = "B123456DMask";
		    - isdigit(str[0]) => 'B' => 0이 나옴
		    - isdigit(str[1]) => '1' => 0이 아닌 수가 나옴



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------













